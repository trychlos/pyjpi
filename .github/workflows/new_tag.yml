# This workflow runs when a new (non-rc) tag is pushed:
# 1) runs all checks
# 2) publish to TestPyPI
# 3) create a GitHub release with source distributions

name: New tag

on:
  workflow_dispatch:
  push:
    tags:
      - '*'               # run on any new tag

env:
  VENV: venv

jobs:
  diag:
    uses: ./.github/workflows/_diag.yml

  gate:
    # allow manual runs OR tag pushes that are NOT '-rc'
    if: ${{ github.event_name == 'workflow_dispatch' || (startsWith(github.ref, 'refs/tags/') && !contains(github.ref_name, '-rc')) }}
    runs-on: ubuntu-latest
    steps:
      - name: Gate
        run: |
          echo "gate passed: ${{ github.ref_type }}='${{ github.ref_name }}'"

  tests:
    # run tests and compute coverage and complexity
    needs:
      - gate
    uses: ./.github/workflows/_tests.yml
    secrets:
      codecov_token: "${{ secrets.CODECOV_TOKEN }}"

  test-publishing:
    name: Build & publish to TestPyPI (skip if exists)
    needs:
      - tests
    runs-on: ubuntu-latest
    container: python:3.13-slim
    environment: testpypi
    permissions:
      id-token: write
    steps:
      - name: Check out committed code
        uses: actions/checkout@v5
      - name: Prepare Python
        run: |
          pip install -q uv
          uv venv --seed $VENV
          . $VENV/bin/activate
          uv pip install toml
      - name: Install curl/jq
        run: |
          apt-get update
          apt-get install -y curl jq
      - name: Check if version exists on TestPyPI
        id: check
        run: |
          . $VENV/bin/activate
          PACKAGE_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          PACKAGE_NAME=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['name'])")
          echo "Checking: $PACKAGE_NAME==$PACKAGE_VERSION"
          if curl -s "https://test.pypi.org/pypi/$PACKAGE_NAME/json" | jq -r '.releases | keys[]' | grep -q "^$PACKAGE_VERSION$"; then
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi
      - name: Build
        if: steps.check.outputs.should_publish == 'true'
        run: |
          . $VENV/bin/activate
          uv build
      - name: Publish to TestPyPI
        if: steps.check.outputs.should_publish == 'true'
        run: |
          . $VENV/bin/activate
          uv publish --publish-url https://test.pypi.org/legacy/

  release:
    name: Publish GitHub Release
    needs:
      - test-publishing
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out committed code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Vars (tag & package name)
        id: vars
        run: |
          echo "tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          echo "pkg=${{ github.event.repository.name }}-${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
      - name: Create source archives
        run: |
          git archive --format tar.gz --prefix ${{ steps.vars.outputs.pkg }}/ HEAD > ${RUNNER_TEMP}/${{ steps.vars.outputs.pkg }}.tar.gz
          git archive --format zip     --prefix ${{ steps.vars.outputs.pkg }}/ HEAD > ${RUNNER_TEMP}/${{ steps.vars.outputs.pkg }}.zip
          ls -l ${RUNNER_TEMP}/${{ steps.vars.outputs.pkg }}.*
      - name: Create GitHub release
        env:
          GH_TOKEN: ${{ github.token }}
          TAG: ${{ steps.vars.outputs.tag }}
        run: |
          gh release create "$TAG" \
            --title "Release v$TAG" \
            --generate-notes \
            ${RUNNER_TEMP}/${{ steps.vars.outputs.pkg }}.tar.gz \
            ${RUNNER_TEMP}/${{ steps.vars.outputs.pkg }}.zip
